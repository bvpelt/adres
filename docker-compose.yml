version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: my_postgres
    restart: always
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: adres
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d adres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - backend  # Connect to the network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  adres-app:
    image: dockerpinguin/adres:latest  # Change to match your built image version
    networks:
      - backend  # Connect to the network
    container_name: adres
    restart: always
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres/adres
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: 12345
      SPRING_PROFILES_ACTIVE: runtime
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/app-health"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: ["java", "-Dspring.profiles.active=runtime", "-jar", "/app.jar"]
    ports:
      - "8080:8080"
      - "8081:8081"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"  # Expose Prometheus UI
    networks:
      - backend
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml # Mount Prometheus configuration
    depends_on:
      - adres-app

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Expose Grafana UI
    networks:
      - backend
    volumes:
      - grafana_data:/var/lib/grafana # Persist Grafana data
    depends_on:
      - prometheus

  angular-app:
    image: dockerpinguin/angular-app:v1.0
    networks:
      - backend  # Connect to the network
    ports:
      - "81:81"
    depends_on:
      adres-app:
        condition: service_healthy
    environment:
      API_BASE_URL: http://adres-app:8080/adres/api/v1 # Important!

networks:
  backend:  # Give your network a descriptive name
    driver: bridge

volumes:
  postgres_data:
  grafana_data:

