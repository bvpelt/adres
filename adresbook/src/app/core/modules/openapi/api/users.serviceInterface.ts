/**
 * Adres API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ProblemDetail } from '../model/models';
import { User } from '../model/models';
import { UserBody } from '../model/models';
import { Users } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface UsersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete all
     * Delete all users 
     * @param xApiKey An api key used to track usage of the api
     * @param authorization 
     */
    deleteAllUsers(xApiKey: string, authorization: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete the specified user
     * Delete only the specified user 
     * @param id The identification of the resource to return
     * @param xApiKey An api key used to track usage of the api
     * @param authorization 
     */
    deleteUser(id: number, xApiKey: string, authorization: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Retrieve the specified user
     * Retrieve only one user with id userId 
     * @param id The identification of the resource to return
     * @param xApiKey An api key used to track usage of the api
     */
    getUser(id: number, xApiKey: string, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Retrieve all known users
     * Retrieve all known users, using paging and sorting 
     * @param xApiKey An api key used to track usage of the api
     * @param page pagenumber starts on 1
     * @param size number of elements on each page - minimum    1 - default   25 - maximum: 100 
     * @param sort field names to sort on
     */
    getUsers(xApiKey: string, page?: number, size?: number, sort?: string, extraHttpRequestParams?: any): Observable<Users>;

    /**
     * Update the specified user
     * Update only the user specified with userId 
     * @param id The identification of the resource to return
     * @param xApiKey An api key used to track usage of the api
     * @param authorization 
     * @param userBody Request parameters
     */
    patchUser(id: number, xApiKey: string, authorization: string, userBody?: UserBody, extraHttpRequestParams?: any): Observable<User>;

    /**
     * Create a new user
     * Create a new user To determine if an user is new the input is compared on the hash value of: - username - password - email - phone If the hash value already exists in the backend, the user is considered to exist 
     * @param xApiKey An api key used to track usage of the api
     * @param authorization 
     * @param userBody Request parameters
     */
    postUser(xApiKey: string, authorization: string, userBody?: UserBody, extraHttpRequestParams?: any): Observable<User>;

}
